import logging

import sys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import random
from time import sleep
import undetected_chromedriver as uc
import time
import requests

from .models import RamDataParser, CpuCoolerDataParser, CoolingSystemDataParser, CpuDataParser, GpuDataParser, MotherboardDataParser

class BrowserManager:
    @classmethod
    def start_browser(cls, proxies):
        # 1. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
        options = uc.ChromeOptions()
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument('--guest')  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        options.add_argument('--no-first-run')
        options.add_argument('--disable-web-security')
        options.add_argument('--allow-running-insecure-content')
        options.add_argument('--disable-extensions')
        options.add_argument('--disable-popup-blocking')
        options.add_argument('--disable-notifications')
        options.add_argument('--disable-geolocation')

        is_proxy_used = False
        for proxy in proxies:
            if cls.check_proxy_simple(proxy):
                options.add_argument(f"--proxy-server={proxy}")
                is_proxy_used = True

        if not is_proxy_used:
            print("–í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
            logging.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∏ —Å –æ–¥–Ω–∏–º –ø—Ä–æ–∫—Å–∏")
            logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞...")
            sys.exit()


        # 2. –†–æ—Ç–∞—Ü–∏—è User-Agent
        user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0',
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Vivaldi/6.2.3105.58'
        ]
        options.add_argument(f'user-agent={random.choice(user_agents)}')

        # 3. –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–∞—Å–∫–∏—Ä–æ–≤–∫–æ–π
        driver = uc.Chrome(
            options=options,
            headless=False,
            use_subprocess=True,
            version_main=140,
        )

        # 4. –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è CDP –∫–æ–º–∞–Ω–¥—ã
        driver.execute_cdp_cmd('Network.setExtraHTTPHeaders', {
            'headers': {
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Sec-CH-UA': '"Chromium";v="122", "Not(A:Brand";v="24", "Google Chrome";v="122"',
                'Sec-CH-UA-Mobile': '?0',
                'Sec-CH-UA-Platform': '"Windows"',
                'Referer': 'https://www.dns-shop.ru/',
                'DNT': '1'
            }
        })

        return driver

    @staticmethod
    # –≠–º—É–ª–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    def human_like_actions(next_page, driver):
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight * 0.2);")
        sleep(random.uniform(0.5, 1.5))
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight * 0.5);")
        sleep(random.uniform(0.7, 2))
        next_page_elem = driver.find_element(By.XPATH, next_page)
        driver.execute_script("arguments[0].scrollIntoView(true);", next_page_elem)
        sleep(random.uniform(1, 3))

    @classmethod
    def check_proxy_simple(cls, proxy, timeout=10):
        proxies = {
            'http': f'http://{proxy}',
            'https': f'http://{proxy}'
        }

        try:
            start_time = time.time()
            response = requests.get(
                'http://httpbin.org/ip',
                proxies=proxies,
                timeout=timeout
            )
            response_time = time.time() - start_time

            if response.status_code == 200:
                logging.info(1, f"‚úÖ –ü—Ä–æ–∫—Å–∏ {proxy} –¥–æ—Å—Ç—É–ø–µ–Ω")
                logging.info(1, f"‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f} —Å–µ–∫")
                logging.info(1, f"üåê IP –∞–¥—Ä–µ—Å: {response.json()['origin']}")
                return True
            else:
                logging.error(f"‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                return False

        except requests.exceptions.ConnectTimeout:
            logging.warn(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏ {proxy}")
            return False
        except requests.exceptions.ConnectionError:
            logging.error(f"üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏ {proxy}")
            return False
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏: {e}")
            return False

class DNSScraper:
    def __init__(self, proxies):
        self.driver = BrowserManager.start_browser(proxies)
        self.xpathes = {
            "name": "//div[@class='catalog-product__name-wrapper']//span",
            "price": "//div[@class='product-buy__price']",
            "href": "//a[@class='catalog-product__name ui-link ui-link_black']",
            "next-page": "//button[contains(text(), '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë')]"
        }

    def scrape_page(self, url):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.driver.get(url)
        sleep(random.uniform(5, 10))

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        WebDriverWait(self.driver, 15).until(
            EC.presence_of_element_located((By.XPATH, self.xpathes['name'])))

        while self.driver.find_element(By.XPATH, self.xpathes["next-page"]):
            BrowserManager.human_like_actions(self.xpathes["next-page"], self.driver)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞
            button = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable(
                    (By.XPATH, self.xpathes["next-page"]))
            )
            button.click()
            sleep(random.uniform(0.5, 1.5))

        # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        names = self.__find_names()
        prices = self.__find_prices()
        hrefs = self.__find_hrefs()

        return [names, prices, hrefs]

    def __find_names(self):
        # –ü–æ–∏—Å–∫ –∏–º–µ–Ω
        return [name.text for name in self.driver.find_elements(By.XPATH, self.xpathes['name'])]

    def __find_prices(self):
        # –ü–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω
        return [price.text.replace('\u202f', '').replace('P', '').replace('\u2009', '') for price in self.driver.find_elements(By.XPATH, self.xpathes['price'])]

    def __find_hrefs(self):
        return [href.get_attribute('href') for href in self.driver.find_elements(By.XPATH, self.xpathes['href'])]

    def close(self):
        self.driver.quit()

class ParserFactory:
    @staticmethod
    def get_parser(component_type):
        parsers = {
            'ram': RamDataParser,
            'cpu': CpuDataParser,
            'gpu': GpuDataParser,
            'cpu_cooler': CpuCoolerDataParser,
            'motherboard': MotherboardDataParser,
            'cooling_system': CoolingSystemDataParser
        }
        return parsers.get(component_type.lower())
